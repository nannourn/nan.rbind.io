---
title: "We Out Here Tryin' to Function"
description: "Creating a function for simple ggplots."
author:
  - name: Nan Nourn
    url: https://nan.seriousconservation.org
    orcid: 0000-0001-5057-0640
    affiliation: Michigan State University
    affiliation-url: https://fw.msu.edu
date: 08-02-2021
categories: [R, tidyverse, programming] #
image: preview-image.jpeg
draft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
---

One of the key steps in making "improvements" on your R journey is to write code that is more clear, succinct, concise and short; for me, this usually occurs when I need to create multiple plots of variables when exploring a dataset.

I find myself usually making simple bar plots using `ggplot` and `geom_col()` to count things. Instead of copying-and-pasting the same ggplot code and altering the the column names in the code like a newbie hack, I recently learned about double curly braces "{{ }}" which allow you to dynamically pass unquoted variable names within functions.

First, we'll use the <a href="https://allisonhorst.github.io/palmerpenguins/" target = "_blank">palmerpenguins</a> package to make some bar plots (Yeah, I am fully aware that I should've worked with some Spotify/Apple Music Bay Area music datasets to make this blog post even more *hyphy*). I examine the penguins dataset to see which columns are categorical/discrete and numerical/continuous:

```{r}
#| label: load-the-data
#| warning: false
library(tidyverse)
library(palmerpenguins)
theme_set(theme_minimal())

penguins %>% glimpse()
```

An easy first look at exploring a dataset is to simply count the number of items in a variable. I want to determine the counts across the categorical columns and make a bar plot for each. That happens to be the `species`, `island` and `sex` columns. Here's the long way how to do it:

```{r}
#| label: plot-the-data
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
penguins %>% 
  drop_na() %>% 
  count(species, sort = TRUE) %>% 
  mutate(species = fct_reorder(species, n)) %>% 
  ggplot(aes(x = species, y = n)) + 
  geom_col() +
  coord_flip()

penguins %>% 
  drop_na() %>% 
  count(island, sort = TRUE) %>% 
  mutate(island = fct_reorder(island, n)) %>% 
  ggplot(aes(x = island, y = n)) + 
  geom_col() +
  coord_flip()

penguins %>% 
  drop_na() %>% 
  count(sex, sort = TRUE) %>% 
  mutate(sex = fct_reorder(sex, n)) %>% 
  ggplot(aes(x = sex, y = n)) + 
  geom_col() +
  coord_flip()
```

In the code demonstrated above, I realize that all I am just changing is the name of the columns (`species`, `island`, `sex`) to create the three different plots. The rule of thumb is to succint programming is to avoid duplication of code -- twice is fine but thrice is too much! Here, we can attempt to create a function to shorten the number of lines written. We create a function (I named it `geomcol_discrete`) with the nifty use of the double curly brackets `{{ column }}` to maintain a tidyverse work flow:

```{r}
#| label: create-the-function
#| warning: false
#| message: false
# function - discrete plots
geomcol_discrete <- function(tbl, column) {
  tbl %>% 
    drop_na() %>% 
    count({{ column }}, sort = TRUE) %>% 
    mutate({{ column }} := fct_reorder({{ column }}, n)) %>% 
    ggplot(aes(x = {{ column }}, y = n)) + 
    geom_col() +
    coord_flip()
}
```

And now we quickly plot with `geomcol_discrete`:

```{r}
#| label: plot-using-function
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
penguins %>% geomcol_discrete(species)
penguins %>% geomcol_discrete(island)
penguins %>% geomcol_discrete(sex)
```

I also created a function to plot histograms for the continuous data `geomhist_continuous`:

```{r}
#| label: continuous-function-plots
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 2
# function - continuous plots
geomhist_continuous <- function(tbl, column) {
  tbl %>% 
    drop_na() %>% 
    ggplot(aes(x = {{ column }}, fill = species)) +
    geom_histogram(alpha = 0.8)
}

# now we quickly plot
penguins %>% geomhist_continuous(bill_length_mm)
penguins %>% geomhist_continuous(bill_depth_mm)
penguins %>% geomhist_continuous(flipper_length_mm)
penguins %>% geomhist_continuous(body_mass_g)
```

The next step further would be to create a vector of column names so that I can loop the functions. Stay tuned for a future update. As the Bay Area hip-hop lingo would dictate, *We out here tryin' to function!*

::: column-screen
[![bay area native H.E.R.](h.e.r.jpg){fig-alt="bay area native H.E.R." fig-align="center"}](https://www.instagram.com/hermusicofficial/)
:::
