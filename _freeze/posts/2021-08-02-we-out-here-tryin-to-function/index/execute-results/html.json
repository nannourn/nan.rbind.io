{
  "hash": "e5b1811bac8d5f52214aa9a4c034b7bc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"We Out Here Tryin' to Function\"\ndescription: \"Creating a function for simple ggplots.\"\nauthor:\n  - name: Nan Nourn\n    url: https://nan.seriousconservation.org\n    orcid: 0000-0001-5057-0640\n    affiliation: Michigan State University\n    affiliation-url: https://fw.msu.edu\ndate: 08-02-2021\ncategories: [R, tidyverse, programming] #\nimage: preview-image.jpeg\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\nOne of the key steps in making \"improvements\" on your R journey is to write code that is more clear, succinct, concise and short; for me, this usually occurs when I need to create multiple plots of variables when exploring a dataset.\n\nI find myself usually making simple bar plots using `ggplot` and `geom_col()` to count things. Instead of copying-and-pasting the same ggplot code and altering the the column names in the code like a newbie hack, I recently learned about double curly braces \"{{ }}\" which allow you to dynamically pass unquoted variable names within functions.\n\nFirst, we'll use the <a href=\"https://allisonhorst.github.io/palmerpenguins/\" target = \"_blank\">palmerpenguins</a> package to make some bar plots (Yeah, I am fully aware that I should've worked with some Spotify/Apple Music Bay Area music datasets to make this blog post even more *hyphy*). I examine the penguins dataset to see which columns are categorical/discrete and numerical/continuous:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\ntheme_set(theme_minimal())\n\npenguins %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n\n\n:::\n:::\n\n\nAn easy first look at exploring a dataset is to simply count the number of items in a variable. I want to determine the counts across the categorical columns and make a bar plot for each. That happens to be the `species`, `island` and `sex` columns. Here's the long way how to do it:\n\n\n::: {.cell .column-screen-inset-shaded layout-nrow=\"1\"}\n\n```{.r .cell-code}\npenguins %>% \n  drop_na() %>% \n  count(species, sort = TRUE) %>% \n  mutate(species = fct_reorder(species, n)) %>% \n  ggplot(aes(x = species, y = n)) + \n  geom_col() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-the-data-1.png){width=672}\n:::\n\n```{.r .cell-code}\npenguins %>% \n  drop_na() %>% \n  count(island, sort = TRUE) %>% \n  mutate(island = fct_reorder(island, n)) %>% \n  ggplot(aes(x = island, y = n)) + \n  geom_col() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-the-data-2.png){width=672}\n:::\n\n```{.r .cell-code}\npenguins %>% \n  drop_na() %>% \n  count(sex, sort = TRUE) %>% \n  mutate(sex = fct_reorder(sex, n)) %>% \n  ggplot(aes(x = sex, y = n)) + \n  geom_col() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-the-data-3.png){width=672}\n:::\n:::\n\n\nIn the code demonstrated above, I realize that all I am just changing is the name of the columns (`species`, `island`, `sex`) to create the three different plots. The rule of thumb is to succint programming is to avoid duplication of code -- twice is fine but thrice is too much! Here, we can attempt to create a function to shorten the number of lines written. We create a function (I named it `geomcol_discrete`) with the nifty use of the double curly brackets `{{ column }}` to maintain a tidyverse work flow:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# function - discrete plots\ngeomcol_discrete <- function(tbl, column) {\n  tbl %>% \n    drop_na() %>% \n    count({{ column }}, sort = TRUE) %>% \n    mutate({{ column }} := fct_reorder({{ column }}, n)) %>% \n    ggplot(aes(x = {{ column }}, y = n)) + \n    geom_col() +\n    coord_flip()\n}\n```\n:::\n\n\nAnd now we quickly plot with `geomcol_discrete`:\n\n\n::: {.cell .column-screen-inset-shaded layout-nrow=\"1\"}\n\n```{.r .cell-code}\npenguins %>% geomcol_discrete(species)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-using-function-1.png){width=672}\n:::\n\n```{.r .cell-code}\npenguins %>% geomcol_discrete(island)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-using-function-2.png){width=672}\n:::\n\n```{.r .cell-code}\npenguins %>% geomcol_discrete(sex)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-using-function-3.png){width=672}\n:::\n:::\n\n\nI also created a function to plot histograms for the continuous data `geomhist_continuous`:\n\n\n::: {.cell .column-screen-inset-shaded layout-nrow=\"2\"}\n\n```{.r .cell-code}\n# function - continuous plots\ngeomhist_continuous <- function(tbl, column) {\n  tbl %>% \n    drop_na() %>% \n    ggplot(aes(x = {{ column }}, fill = species)) +\n    geom_histogram(alpha = 0.8)\n}\n\n# now we quickly plot\npenguins %>% geomhist_continuous(bill_length_mm)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/continuous-function-plots-1.png){width=672}\n:::\n\n```{.r .cell-code}\npenguins %>% geomhist_continuous(bill_depth_mm)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/continuous-function-plots-2.png){width=672}\n:::\n\n```{.r .cell-code}\npenguins %>% geomhist_continuous(flipper_length_mm)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/continuous-function-plots-3.png){width=672}\n:::\n\n```{.r .cell-code}\npenguins %>% geomhist_continuous(body_mass_g)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/continuous-function-plots-4.png){width=672}\n:::\n:::\n\n\nThe next step further would be to create a vector of column names so that I can loop the functions. Stay tuned for a future update. As the Bay Area hip-hop lingo would dictate, *We out here tryin' to function!*\n\n::: column-screen\n[![bay area native H.E.R.](h.e.r.jpg){fig-alt=\"bay area native H.E.R.\" fig-align=\"center\"}](https://www.instagram.com/hermusicofficial/)\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}